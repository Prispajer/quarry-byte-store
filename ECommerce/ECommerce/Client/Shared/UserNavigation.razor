@using ECommerce.Shared.Models.Cart
@using ECommerce.Shared.Models;
@inject ICartService CartService
@inject NavigationManager NavigationManager
@inject ISyncLocalStorageService LocalStorage
@inject IModalService ModalService
@inject ISessionService SessionService
@inject IAuthService AuthService
@implements IDisposable

<div class="icons-container">
    <button class="icon-option icon-toggle">
        <i class="oi oi-person" @onclick="() => ModalService.ToggleAuthModalState(true)"></i>
    </button>
    <a href="cart" class="icon-option">
        <img src="/cart.png" class="oi" />
        <span class="cart-counter">@GetCartItemsCount()</span>
    </a>
    <button class="icon-option icon-toggle">
        <i class="oi oi-magnifying-glass" @onclick="() => ModalService.ToggleSearchModalState(true)"></i>
    </button>
    @if (_session != null)
    {
        <div class="auth-logged-user">
            <span class="auth-username header-hover">@_session.Username</span>
            <span class="auth-logout header-hover" @onclick="Logout">Logout</span>
        </div>
    }
    else
    {
        <a href="/user/login" class="auth-option header-hover">
            <span>Login</span>
        </a>
        <span class="vertical-line">|</span>
        <a href="/user/register" class="auth-option header-hover">
            <span>Register</span>
        </a>
    }
</div>

@code {
    private Session? _session;

    private int GetCartItemsCount()
    {
        var cart = LocalStorage.GetItem<List<CartItem>>("cart");
        return cart != null ? cart.Count : 0;
    }

    private async Task Logout()
    {
        await AuthService.ClearCurrentSession();
        _session = null;
        NavigationManager.NavigateTo("/", forceLoad: true);
    }

    protected override async Task OnInitializedAsync()
    {
        _session = await AuthService.GetCurrentSession();
        AuthService.OnChange += UpdateSession;
    }

    private async void UpdateSession()
    {
        _session = await AuthService.GetCurrentSession();
        StateHasChanged();
    }

    public void Dispose()
    {
        AuthService.OnChange -= UpdateSession;
    }
}
