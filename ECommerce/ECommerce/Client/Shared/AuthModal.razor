@inject IModalService ModalService
@inject IAuthService AuthService
@inject ISessionService SessionService
@inject NavigationManager NavigationManager
@using ECommerce.Shared.Models;


<div class="auth-modal @modalRender">
    <div class="auth-modal-content">
        <button class="auth-close-button" @onclick="() => ModalService.ToggleAuthModalState(false)">&times;</button>
        <div class="auth-modal-body">
            @if (_session != null)
            {
                <div class="auth-logged-user">
                    <span class="auth-username header-hover">@_session.Username</span>
                    <span class="auth-logout header-hover" @onclick="Logout">Wyloguj</span>
                </div>
            }
            else
            {
                <div class="auth-button-container login-button">
                    <button class="auth-button" @onclick="RedirectToRegister">Register</button>
                </div>
                <div class="auth-button-container register-button">
                    <button class="auth-button" @onclick="RedirectToLogin">Login</button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private Session? _session;
    private string modalRender => ModalService.AuthModalState ? "" : "auth-close-window";

    protected override async Task OnInitializedAsync()
    {
        _session = await AuthService.GetCurrentSession();
        AuthService.OnChange += UpdateSession;
        ModalService.ModalStateChanged += StateHasChanged;
    }

    private async void UpdateSession()
    {
        _session = await AuthService.GetCurrentSession();
        StateHasChanged();
    }

    private async Task Logout()
    {
        await AuthService.ClearCurrentSession();
        _session = null;
        NavigationManager.NavigateTo("/", forceLoad: true);
    }

    private void RedirectToLogin()
    {
        ModalService.ToggleAuthModalState(false);
        ModalService.RedirectToLogin();
    }

    private void RedirectToRegister()
    {
        ModalService.ToggleAuthModalState(false);
        ModalService.RedirectToRegister();
    }

    public void Dispose()
    {
        AuthService.OnChange -= UpdateSession;
        ModalService.ModalStateChanged -= StateHasChanged;
    }
}
