@inject NavigationManager NavigationManager
@inject IProductService ProductService
@implements IDisposable

@if (ProductService.Products == null || ProductService.Products.Count == 0)
{
    <div class="no-results">
        No matching results!
    </div>
}
else
{
    <div class="product-list">
        @foreach (var product in ProductService.Products)
        {
            <div class="product-card" @onclick="()=> GoToProduct(product.Id)">
                <div class="product-image">
                    <img src="@product.ImageUrl" alt="@product.Title" />
                </div>
                <div class="product-details">
                    <span class="product-title">@product.Title</span>
                    <p class="product-description">@product.Description</p>
                    <div class="product-price">
                        @GetPriceText(product)
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private void GoToProduct(int productId)
    {
        NavigationManager.NavigateTo($"/product/{productId}");
    }


    private string GetPriceText(Product product)
    {
        var variants = product.Variants;
        if (variants.Count == 0)
        {
            return string.Empty;
        }
        else if (variants.Count == 1)
        {
            return $"${variants[0].Price}";
        }
        decimal minPrice = variants.Min(v => v.Price);
        return $"Starting at ${minPrice}";
    }

    protected override void OnInitialized()
    {
        ProductService.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.ProductsChanged -= StateHasChanged;
    }
}