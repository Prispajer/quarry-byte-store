@inject IProductService ProductService
@implements IDisposable

@if (ProductService.Products == null || ProductService.Products.Count == 0)
{
    <div class="no-results">
        No matching results!
    </div>
}
else
{
    <ul class="product-list">
        @foreach (var product in ProductService.Products)
        {
            <li class="product-card">
                <div class="product-image">
                    <a href="/product/@product.Id">
                        <img src="@product.ImageUrl" alt="@product.Title" />
                    </a>
                </div>
                <div class="product-details">
                    <a href="/product/@product.Id" class="product-title">@product.Title</a>
                    <p class="product-description">@product.Description</p>
                    <div class="product-price">
                        @GetPriceText(product)
                    </div>
                </div>
            </li>
        }
    </ul>
}

@code {
    //Called after the component is initialized - notifies the component that its state has changed when applicable
    protected override void OnInitialized()
    {
        ProductService.ProductsChanged += StateHasChanged;
    }

    //Resetting of StateHasChanged method
    public void Dispose()
    {
        ProductService.ProductsChanged -= StateHasChanged;
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;
        if (variants.Count == 0)
        {
            return string.Empty;
        }
        else if (variants.Count == 1)
        {
            return $"${variants[0].Price}";
        }
        decimal minPrice = variants.Min(v => v.Price);
        return $"Starting at ${minPrice}";
    }
}