@inject NavigationManager NavigationManager
@inject IProductService ProductService
@inject IModalService ModalService

<div class="search-container @mobileSearchbar">
    <button class="search-button" @onclick="SearchProducts">
            <span class="oi oi-magnifying-glass"></span>
    </button>
    <input @bind-value="searchText"
           @bind-value:event="oninput"
           type="search"
           list="products"
           @onkeyup="HandleSearch"
           class="search-input"
           placeholder="Szukaj gry, książki czy e-booki"
           @ref="searchInput" />
    <datalist id="products">
        @foreach (var suggestion in suggestions)
        {
            <option>@suggestion</option>
        }
    </datalist>
    <button class="close-button" @onclick="() => ModalService.ToggleSearchModalState(false)">
        <span class="oi oi-x"></span>
    </button>
</div>

@code {
    private string searchText = string.Empty;
    private string mobileSearchbar => ModalService.SearchModalState ? "search-mobile" : "";
    private List<string> suggestions = new List<string>();
    protected ElementReference searchInput;

    public void SearchProducts()
    {
        NavigationManager.NavigateTo($"search/{searchText}");
    }

    public async Task HandleSearch(KeyboardEventArgs args)
    {
        if (args.Key == null || args.Key.Equals("Enter"))
        {
            SearchProducts();
        }
        else if (searchText.Length > 1)
        {
            suggestions = await ProductService.GetProductSearchSuggestions(searchText);
        }
    }

    protected override void OnInitialized()
    {
        ModalService.ModalStateChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ModalService.ModalStateChanged += StateHasChanged;
    }
}
