@using ECommerce.Shared.Dto.User
@page "/user/login"
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject ISessionService SessionService
@inject IAuthService AuthService

<PageTitle>Login</PageTitle>

<EditForm Model="loginUserDto" OnValidSubmit="HandleUserLogin">
    <DataAnnotationsValidator />
    <div class="login-container">
        <h3 class="login-title">Login to your account</h3>
        <div class="login-input">
            <label for="email">Email Adress</label>
            <input @bind="loginUserDto.Email" type="email" class="login-field" id="email" placeholder="Enter email" />
            <ValidationMessage For="@(() => loginUserDto.Email)" />
        </div>
        <div class="login-input">
            <label for="password">Password</label>
            <input @bind="loginUserDto.Password" type="password" class="login-field" id="password" placeholder="Enter password" />
            <ValidationMessage For="@(() => loginUserDto.Password)" />
        </div>
        <button type="submit" class="login-button">Login</button>
        @if (!string.IsNullOrEmpty(message))
        {
            <div class="error-message">@message</div>
        }
    </div>
</EditForm>

@code {
    private LoginUserDto loginUserDto = new LoginUserDto();
    private string message = string.Empty;


    private async Task HandleUserLogin()
    {
        var response = await UserService.LoginUserAsync(loginUserDto);
        if (response.Success)
        {
            var serviceResponse = await SessionService.GetSessionAsync();
            if (serviceResponse.Success)
            {
                AuthService.SetCurrentSession(serviceResponse.Data!);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                message = serviceResponse.Message;
            }
        }
        else
        {
            message = response.Message;
        }
    }

    protected override void OnInitialized()
    {
        AuthService.OnChange += StateHasChanged;
    }
}
