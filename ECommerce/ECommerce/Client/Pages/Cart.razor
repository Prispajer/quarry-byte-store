@page "/cart"
@inject ICartService CartService

<PageTitle>Shopping Cart</PageTitle>

<h3>Mój koszyk</h3>

@if (isLoading)
{
    <span>Loading...</span>
}
else if (cartProducts == null || cartProducts.Count == 0)
{
    <span>@message</span>
}
else
{
    <div class="cart-container">
        @foreach (var product in cartProducts)
        {
            <div class="cart-product-container">
                <div class="cart-product-image">
                    <img src="@product.ImageUrl" class="image" />
                </div>
                <div class="cart-product-informations">
                    <div class="cart-product-title"><h5><a href="/product/@product.ProductId">@product.Title</a></h5></div>
                    <div class="cart-product-type"><span>@product.ProductType</span></div>
                    <div class="cart-product-quantity">
                        <span>Quantity</span>
                        <input type="number" value="@product.Quantity"
                               @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, product))"
                               class="quantity-input"
                               min="1" />
                    </div>
                    <div class="cart-product-delete">
                        <button class="delete-button" @onclick="@(() => RemoveProductFromCart(product.ProductId, product.ProductTypeId))">
                            Delete
                        </button>
                    </div>
                </div>
                <div class="cart-product-price">$@(product.Price * product.Quantity)</div>
            </div>
        }
        <div class="cart-product-summary">
            <div class="cart-product-items"><span>Items</span></div>
            <div class="cart-product-price">
                Total (@cartProducts.Count): $@cartProducts.Sum(product => product.Price * product.Quantity)
            </div>
        </div>
    </div>
}

@code {
    List<CartProductResponse> cartProducts = null;
    string message = "Loading cart...";
    bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }

    private async Task RemoveProductFromCart(int productId, int productTypeId)
    {
        await CartService.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        isLoading = true;
        var items = await CartService.GetCartItems();
        if (items.Count == 0)
        {
            message = "Your cart is empty.";
            cartProducts = new List<CartProductResponse>();
        }
        else
        {
            cartProducts = await CartService.GetCartProducts();
        }
        isLoading = false;
    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponse product)
    {
        product.Quantity = int.Parse(e.Value.ToString());
        if (product.Quantity < 1)
            product.Quantity = 1;
        await CartService.UpdateQuantity(product);
        StateHasChanged();
    }
}
